---
# Install WAL-G

# A precompiled binary for Ubuntu 18.04 and 20.04
- block:
    - name: "Download WAL-G v{{ wal_g_version }} binary"
      get_url:
        url: "https://github.com/wal-g/wal-g/releases/download/v{{ wal_g_version }}/wal-g-pg-ubuntu-{{ ansible_distribution_version }}-amd64.tar.gz"
        dest: /tmp/
        timeout: 60
        validate_certs: false
      environment: "{{ proxy_env | default({}) }}"

    - name: Extract WAL-G into /tmp
      unarchive:
        src: "/tmp/wal-g-pg-ubuntu-{{ ansible_distribution_version }}-amd64.tar.gz"
        dest: /tmp/
        extra_opts:
          - --no-same-owner
        remote_src: true

    - name: Copy WAL-G binary file to /usr/local/bin/
      copy:
        src: "/tmp/wal-g-pg-ubuntu-{{ ansible_distribution_version }}-amd64"
        dest: /usr/local/bin/wal-g
        mode: u+x,g+x,o+x
        remote_src: true
  when:
    - installation_method == "repo"
    - wal_g_version is version('1.0', '>=')
    - (ansible_distribution == 'Ubuntu' and
       (ansible_distribution_version is version('18.04', '==') or
        ansible_distribution_version is version('20.04', '==')))
  tags: wal-g, wal_g, wal_g_install

# build WAL-G from source code
- block:
    - name: Install lib dependencies to build WAL-G
      package:
        name:
          - libbrotli-dev
          - liblzo2-dev
          - libsodium-dev
          - make
          - cmake
          - git
        state: present

    - name: Check the Go version
      shell: |
        set -o pipefail;
        go version | awk {'print $3'} | cut -b 3-6
      args:
        executable: /bin/bash
      changed_when: false
      failed_when: false
      register: go_version
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/go/bin"

    - block:  # Install Go
        - name: Download Go v1.19.4
          get_url:
            url: "https://go.dev/dl/go1.19.4.linux-amd64.tar.gz"
            dest: /tmp/
            timeout: 60
            validate_certs: false

        - name: Install Go
          unarchive:
            src: "/tmp/go1.19.4.linux-amd64.tar.gz"
            dest: /usr/local/
            extra_opts:
              - --no-same-owner
            remote_src: true
      when:
        - go_version.stdout is defined
        - go_version.stdout is version('1.19.4', '<')

    - name: "Download WAL-G v{{ wal_g_version }} source code"
      git:
        repo: https://github.com/wal-g/wal-g.git
        version: v{{ wal_g_version }}
        dest: /tmp/wal-g

    - name: Build WAL-G
      become: true
      become_user: root
      make:
        chdir: /tmp/wal-g/
        target: deps
        params:
          USE_LIBSODIUM: 1
          USE_LZO: 1
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/go/bin"

    - name: Install WAL-G
      become: true
      become_user: root
      make:
        chdir: /tmp/wal-g/
        target: pg_install
        params:
          GOBIN: /usr/local/bin
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/go/bin"
  environment: "{{ proxy_env | default({}) }}"
  when:
    - installation_method == "repo"
    - wal_g_version is version('1.0', '>=')
    - not (ansible_distribution == 'Ubuntu' and
           (ansible_distribution_version is version('18.04', '==') or
            ansible_distribution_version is version('20.04', '==')))
  tags: wal-g, wal_g, wal_g_install

# older versions of WAL-G (for compatibility)
- block:
    - name: "Download WAL-G v{{ wal_g_version }} binary"
      get_url:
        url: "https://github.com/wal-g/wal-g/releases/download/v{{ wal_g_version }}/wal-g.linux-amd64.tar.gz"
        dest: /tmp/
        timeout: 60
        validate_certs: false
      environment: "{{ proxy_env | default({}) }}"

    - name: Extract WAL-G into /tmp
      unarchive:
        src: "/tmp/wal-g.linux-amd64.tar.gz"
        dest: /tmp/
        extra_opts:
          - --no-same-owner
        remote_src: true

    - name: Copy WAL-G binary file to /usr/local/bin/
      copy:
        src: "/tmp/wal-g"
        dest: /usr/local/bin/
        mode: u+x,g+x,o+x
        remote_src: true
  when:
    - installation_method == "repo"
    - wal_g_version is version('0.2.19', '<=')
  tags: wal-g, wal_g, wal_g_install

# installation_method == "file"

# A precompiled binary for Ubuntu 18.04 and 20.04
- block:
    - name: "Extract WAL-G archive {{ wal_g_package_file }} into /tmp"
      unarchive:
        src: "{{ wal_g_package_file }}"
        dest: /tmp/
        extra_opts:
          - --no-same-owner

    - name: Copy WAL-G binary file to /usr/local/bin/
      copy:
        src: "/tmp/{{ wal_g_package_file.split('.tar.gz')[0] | basename }}"
        dest: /usr/local/bin/wal-g
        mode: u+x,g+x,o+x
        remote_src: true
  when:
    - installation_method == "file"
    - wal_g_version is version('1.0', '>=')
    - (wal_g_package_file == "wal-g-pg-ubuntu-18.04-amd64.tar.gz" or
       wal_g_package_file == "wal-g-pg-ubuntu-20.04-amd64.tar.gz")
  tags: wal-g, wal_g, wal_g_install

# older versions of WAL-G (for compatibility)
- block:
    - name: "Extract WAL-G archive {{ wal_g_package_file }} into /tmp"
      unarchive:
        src: "{{ wal_g_package_file }}"
        dest: /tmp/
        extra_opts:
          - --no-same-owner

    - name: Copy WAL-G binary file to /usr/local/bin/
      copy:
        src: "/tmp/wal-g"
        dest: /usr/local/bin/
        mode: u+x,g+x,o+x
        remote_src: true
  when:
    - installation_method == "file"
    - wal_g_version is version('0.2.19', '<=')
    - wal_g_package_file == "wal-g.linux-amd64.tar.gz"
  tags: wal-g, wal_g, wal_g_install

# Configure walg.json
- name: "Generate conf file {{ postgresql_home_dir }}/.walg.json"
  template:
    src: templates/walg.json.j2
    dest: "{{ postgresql_home_dir }}/.walg.json"
    owner: postgres
    group: postgres
    mode: 0644
  tags: wal-g, wal_g, wal_g_conf

...
